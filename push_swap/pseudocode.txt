

Implement an alrgorithm to sort 3 and 5 numbers. From there scale it.

For larger sets of numbers maybe implement turk alrgorithm.



Calculate the push price.

* Init stack A with the values provided;
* Push 2 values to stack B;

- Repeat while stack len > 3;
	* Set target nodes for the values in stack A;
	* Calculate the push price;
	* Push the cheapest from A to B;
- When stack len = to 3, call sort_three;
- Set target nodes for the values in stack B;
- Calculate the push price;
- Push cheapest value from stack B to A;
- When stack B is empty, bring the minimum value of the stack A on top;
-Done


*	Calculate the push price:

	price A = 0;
	price B = 0;

	if above median
		price A = index A;
		price B = index B;
		if (price A == price B)
			node->push_price = price A || price B;
		else
			if (price A > price B)
				node->push_price = price A;
			else
				node->push_price = price B;
		Index node A + index node B;
	if not above median
		price A = stack_len(A) - index A;
		price B = stack_len(B) - index B;
		if (price A == price B)
			node->push_price = price A || price B;
		else
			if (price A > price B)
				node->push_price = price A;
			else
				node->push_price = price B;
	

*	Set cheapest;

	int i = 0;
	while (stack)
		if (stack->push_price == i)
			stack->cheapest_to_push = true;
			break;
		else
			stack->cheapest_to_push = false;
		stack = stack->next;

*	Prepare to push;
		- Bring the node to push and the target node on top of the stack;

		function_to_bring_nodes_on_top(stack A, stack B, push_price, flag_above_median)
		- While (!stackA->cheapest_to_push && stackA->taget_node != stackB->node)
			if (flag_above_median)
				ra || rb;   | rr
			else
				rra || rrb; | rrr
		


*	Push the node;

*** REPEAT;